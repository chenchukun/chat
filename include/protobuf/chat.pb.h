// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class Message;
class Message_Group_info;
class Message_Text;
class Message_User_info;

enum Message_TYPE {
  Message_TYPE_REGISTER = 0,
  Message_TYPE_LOGIN = 1,
  Message_TYPE_ADD_REQUEST = 2,
  Message_TYPE_ADD_RESPOND = 3,
  Message_TYPE_GET_FRIEND_LIST = 4,
  Message_TYPE_GET_USER_INFO = 5,
  Message_TYPE_SINGLE_MSG = 6,
  Message_TYPE_GROUP_MSG = 7,
  Message_TYPE_CREATE_GROUP = 8,
  Message_TYPE_INVITE_ENTER_GROUP = 9,
  Message_TYPE_GET_CHAT_RECORD = 10,
  Message_TYPE_GET_GROUP_LIST = 11,
  Message_TYPE_GET_GROUP_INFO = 12,
  Message_TYPE_GET_GROUP_USER_LIST = 13,
  Message_TYPE_INVITE_ENTER_GROUP_RESPOND = 14,
  Message_TYPE_GET_GROUP_CHAT_RECORD = 15
};
bool Message_TYPE_IsValid(int value);
const Message_TYPE Message_TYPE_TYPE_MIN = Message_TYPE_REGISTER;
const Message_TYPE Message_TYPE_TYPE_MAX = Message_TYPE_GET_GROUP_CHAT_RECORD;
const int Message_TYPE_TYPE_ARRAYSIZE = Message_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_TYPE_descriptor();
inline const ::std::string& Message_TYPE_Name(Message_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_TYPE_descriptor(), value);
}
inline bool Message_TYPE_Parse(
    const ::std::string& name, Message_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_TYPE>(
    Message_TYPE_descriptor(), name, value);
}
enum Message_STATUS {
  Message_STATUS_SUCCESS = 0,
  Message_STATUS_ERROR = 1,
  Message_STATUS_PASSWORD_ERROR = 2,
  Message_STATUS_UID_NOEXISTS = 3
};
bool Message_STATUS_IsValid(int value);
const Message_STATUS Message_STATUS_STATUS_MIN = Message_STATUS_SUCCESS;
const Message_STATUS Message_STATUS_STATUS_MAX = Message_STATUS_UID_NOEXISTS;
const int Message_STATUS_STATUS_ARRAYSIZE = Message_STATUS_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_STATUS_descriptor();
inline const ::std::string& Message_STATUS_Name(Message_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_STATUS_descriptor(), value);
}
inline bool Message_STATUS_Parse(
    const ::std::string& name, Message_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_STATUS>(
    Message_STATUS_descriptor(), name, value);
}
// ===================================================================

class Message_Text : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Message.Text) */ {
 public:
  Message_Text();
  virtual ~Message_Text();

  Message_Text(const Message_Text& from);

  inline Message_Text& operator=(const Message_Text& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Text& default_instance();

  void Swap(Message_Text* other);

  // implements Message ----------------------------------------------

  inline Message_Text* New() const { return New(NULL); }

  Message_Text* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Text& from);
  void MergeFrom(const Message_Text& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_Text* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src_id = 1;
  bool has_src_id() const;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 1;
  const ::std::string& src_id() const;
  void set_src_id(const ::std::string& value);
  void set_src_id(const char* value);
  void set_src_id(const char* value, size_t size);
  ::std::string* mutable_src_id();
  ::std::string* release_src_id();
  void set_allocated_src_id(::std::string* src_id);

  // required string dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id();
  static const int kDstIdFieldNumber = 2;
  const ::std::string& dst_id() const;
  void set_dst_id(const ::std::string& value);
  void set_dst_id(const char* value);
  void set_dst_id(const char* value, size_t size);
  ::std::string* mutable_dst_id();
  ::std::string* release_dst_id();
  void set_allocated_dst_id(::std::string* dst_id);

  // required int32 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // required string msg = 4;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:chat.Message.Text)
 private:
  inline void set_has_src_id();
  inline void clear_has_src_id();
  inline void set_has_dst_id();
  inline void clear_has_dst_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_msg();
  inline void clear_has_msg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_id_;
  ::google::protobuf::internal::ArenaStringPtr dst_id_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 time_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Message_Text* default_instance_;
};
// -------------------------------------------------------------------

class Message_User_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Message.User_info) */ {
 public:
  Message_User_info();
  virtual ~Message_User_info();

  Message_User_info(const Message_User_info& from);

  inline Message_User_info& operator=(const Message_User_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_User_info& default_instance();

  void Swap(Message_User_info* other);

  // implements Message ----------------------------------------------

  inline Message_User_info* New() const { return New(NULL); }

  Message_User_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_User_info& from);
  void MergeFrom(const Message_User_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_User_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // required string uname = 2;
  bool has_uname() const;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // optional string area = 3;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 3;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // required int32 friends = 4;
  bool has_friends() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 4;
  ::google::protobuf::int32 friends() const;
  void set_friends(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.Message.User_info)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_friends();
  inline void clear_has_friends();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::int32 friends_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Message_User_info* default_instance_;
};
// -------------------------------------------------------------------

class Message_Group_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Message.Group_info) */ {
 public:
  Message_Group_info();
  virtual ~Message_Group_info();

  Message_Group_info(const Message_Group_info& from);

  inline Message_Group_info& operator=(const Message_Group_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Group_info& default_instance();

  void Swap(Message_Group_info* other);

  // implements Message ----------------------------------------------

  inline Message_Group_info* New() const { return New(NULL); }

  Message_Group_info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Group_info& from);
  void MergeFrom(const Message_Group_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message_Group_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gid = 1;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 1;
  const ::std::string& gid() const;
  void set_gid(const ::std::string& value);
  void set_gid(const char* value);
  void set_gid(const char* value, size_t size);
  ::std::string* mutable_gid();
  ::std::string* release_gid();
  void set_allocated_gid(::std::string* gid);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string own = 3;
  bool has_own() const;
  void clear_own();
  static const int kOwnFieldNumber = 3;
  const ::std::string& own() const;
  void set_own(const ::std::string& value);
  void set_own(const char* value);
  void set_own(const char* value, size_t size);
  ::std::string* mutable_own();
  ::std::string* release_own();
  void set_allocated_own(::std::string* own);

  // required int32 nums = 4;
  bool has_nums() const;
  void clear_nums();
  static const int kNumsFieldNumber = 4;
  ::google::protobuf::int32 nums() const;
  void set_nums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.Message.Group_info)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_own();
  inline void clear_has_own();
  inline void set_has_nums();
  inline void clear_has_nums();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr own_;
  ::google::protobuf::int32 nums_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Message_Group_info* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Text Text;
  typedef Message_User_info User_info;
  typedef Message_Group_info Group_info;

  typedef Message_TYPE TYPE;
  static const TYPE REGISTER =
    Message_TYPE_REGISTER;
  static const TYPE LOGIN =
    Message_TYPE_LOGIN;
  static const TYPE ADD_REQUEST =
    Message_TYPE_ADD_REQUEST;
  static const TYPE ADD_RESPOND =
    Message_TYPE_ADD_RESPOND;
  static const TYPE GET_FRIEND_LIST =
    Message_TYPE_GET_FRIEND_LIST;
  static const TYPE GET_USER_INFO =
    Message_TYPE_GET_USER_INFO;
  static const TYPE SINGLE_MSG =
    Message_TYPE_SINGLE_MSG;
  static const TYPE GROUP_MSG =
    Message_TYPE_GROUP_MSG;
  static const TYPE CREATE_GROUP =
    Message_TYPE_CREATE_GROUP;
  static const TYPE INVITE_ENTER_GROUP =
    Message_TYPE_INVITE_ENTER_GROUP;
  static const TYPE GET_CHAT_RECORD =
    Message_TYPE_GET_CHAT_RECORD;
  static const TYPE GET_GROUP_LIST =
    Message_TYPE_GET_GROUP_LIST;
  static const TYPE GET_GROUP_INFO =
    Message_TYPE_GET_GROUP_INFO;
  static const TYPE GET_GROUP_USER_LIST =
    Message_TYPE_GET_GROUP_USER_LIST;
  static const TYPE INVITE_ENTER_GROUP_RESPOND =
    Message_TYPE_INVITE_ENTER_GROUP_RESPOND;
  static const TYPE GET_GROUP_CHAT_RECORD =
    Message_TYPE_GET_GROUP_CHAT_RECORD;
  static inline bool TYPE_IsValid(int value) {
    return Message_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Message_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Message_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Message_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Message_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Message_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Message_TYPE_Parse(name, value);
  }

  typedef Message_STATUS STATUS;
  static const STATUS SUCCESS =
    Message_STATUS_SUCCESS;
  static const STATUS ERROR =
    Message_STATUS_ERROR;
  static const STATUS PASSWORD_ERROR =
    Message_STATUS_PASSWORD_ERROR;
  static const STATUS UID_NOEXISTS =
    Message_STATUS_UID_NOEXISTS;
  static inline bool STATUS_IsValid(int value) {
    return Message_STATUS_IsValid(value);
  }
  static const STATUS STATUS_MIN =
    Message_STATUS_STATUS_MIN;
  static const STATUS STATUS_MAX =
    Message_STATUS_STATUS_MAX;
  static const int STATUS_ARRAYSIZE =
    Message_STATUS_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  STATUS_descriptor() {
    return Message_STATUS_descriptor();
  }
  static inline const ::std::string& STATUS_Name(STATUS value) {
    return Message_STATUS_Name(value);
  }
  static inline bool STATUS_Parse(const ::std::string& name,
      STATUS* value) {
    return Message_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .chat.Message.TYPE msg_type = 1;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::chat::Message_TYPE msg_type() const;
  void set_msg_type(::chat::Message_TYPE value);

  // optional string src_id = 2;
  bool has_src_id() const;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 2;
  const ::std::string& src_id() const;
  void set_src_id(const ::std::string& value);
  void set_src_id(const char* value);
  void set_src_id(const char* value, size_t size);
  ::std::string* mutable_src_id();
  ::std::string* release_src_id();
  void set_allocated_src_id(::std::string* src_id);

  // optional string dst_id = 3;
  bool has_dst_id() const;
  void clear_dst_id();
  static const int kDstIdFieldNumber = 3;
  const ::std::string& dst_id() const;
  void set_dst_id(const ::std::string& value);
  void set_dst_id(const char* value);
  void set_dst_id(const char* value, size_t size);
  ::std::string* mutable_dst_id();
  ::std::string* release_dst_id();
  void set_allocated_dst_id(::std::string* dst_id);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string user_id = 5;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string user_name = 6;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional .chat.Message.User_info user_info = 7;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 7;
  const ::chat::Message_User_info& user_info() const;
  ::chat::Message_User_info* mutable_user_info();
  ::chat::Message_User_info* release_user_info();
  void set_allocated_user_info(::chat::Message_User_info* user_info);

  // optional .chat.Message.Text msg_text = 8;
  bool has_msg_text() const;
  void clear_msg_text();
  static const int kMsgTextFieldNumber = 8;
  const ::chat::Message_Text& msg_text() const;
  ::chat::Message_Text* mutable_msg_text();
  ::chat::Message_Text* release_msg_text();
  void set_allocated_msg_text(::chat::Message_Text* msg_text);

  // repeated string user_list = 9;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 9;
  const ::std::string& user_list(int index) const;
  ::std::string* mutable_user_list(int index);
  void set_user_list(int index, const ::std::string& value);
  void set_user_list(int index, const char* value);
  void set_user_list(int index, const char* value, size_t size);
  ::std::string* add_user_list();
  void add_user_list(const ::std::string& value);
  void add_user_list(const char* value);
  void add_user_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_list();

  // repeated .chat.Message.Text chat_record = 10;
  int chat_record_size() const;
  void clear_chat_record();
  static const int kChatRecordFieldNumber = 10;
  const ::chat::Message_Text& chat_record(int index) const;
  ::chat::Message_Text* mutable_chat_record(int index);
  ::chat::Message_Text* add_chat_record();
  ::google::protobuf::RepeatedPtrField< ::chat::Message_Text >*
      mutable_chat_record();
  const ::google::protobuf::RepeatedPtrField< ::chat::Message_Text >&
      chat_record() const;

  // optional int32 page = 11;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 11;
  ::google::protobuf::int32 page() const;
  void set_page(::google::protobuf::int32 value);

  // optional .chat.Message.STATUS status = 12;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  ::chat::Message_STATUS status() const;
  void set_status(::chat::Message_STATUS value);

  // optional .chat.Message.Group_info group_info = 13;
  bool has_group_info() const;
  void clear_group_info();
  static const int kGroupInfoFieldNumber = 13;
  const ::chat::Message_Group_info& group_info() const;
  ::chat::Message_Group_info* mutable_group_info();
  ::chat::Message_Group_info* release_group_info();
  void set_allocated_group_info(::chat::Message_Group_info* group_info);

  // repeated string group_list = 14;
  int group_list_size() const;
  void clear_group_list();
  static const int kGroupListFieldNumber = 14;
  const ::std::string& group_list(int index) const;
  ::std::string* mutable_group_list(int index);
  void set_group_list(int index, const ::std::string& value);
  void set_group_list(int index, const char* value);
  void set_group_list(int index, const char* value, size_t size);
  ::std::string* add_group_list();
  void add_group_list(const ::std::string& value);
  void add_group_list(const char* value);
  void add_group_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_list();

  // repeated string group_user_list = 15;
  int group_user_list_size() const;
  void clear_group_user_list();
  static const int kGroupUserListFieldNumber = 15;
  const ::std::string& group_user_list(int index) const;
  ::std::string* mutable_group_user_list(int index);
  void set_group_user_list(int index, const ::std::string& value);
  void set_group_user_list(int index, const char* value);
  void set_group_user_list(int index, const char* value, size_t size);
  ::std::string* add_group_user_list();
  void add_group_user_list(const ::std::string& value);
  void add_group_user_list(const char* value);
  void add_group_user_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_user_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_user_list();

  // @@protoc_insertion_point(class_scope:chat.Message)
 private:
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_src_id();
  inline void clear_has_src_id();
  inline void set_has_dst_id();
  inline void clear_has_dst_id();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_msg_text();
  inline void clear_has_msg_text();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_group_info();
  inline void clear_has_group_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_id_;
  ::google::protobuf::internal::ArenaStringPtr dst_id_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  int msg_type_;
  ::google::protobuf::int32 page_;
  ::chat::Message_User_info* user_info_;
  ::chat::Message_Text* msg_text_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_list_;
  ::google::protobuf::RepeatedPtrField< ::chat::Message_Text > chat_record_;
  ::chat::Message_Group_info* group_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_user_list_;
  int status_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_Text

// required string src_id = 1;
inline bool Message_Text::has_src_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Text::set_has_src_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Text::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Text::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_id();
}
inline const ::std::string& Message_Text::src_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.src_id)
  return src_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_src_id(const ::std::string& value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.src_id)
}
inline void Message_Text::set_src_id(const char* value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.src_id)
}
inline void Message_Text::set_src_id(const char* value, size_t size) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.src_id)
}
inline ::std::string* Message_Text::mutable_src_id() {
  set_has_src_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.src_id)
  return src_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Text::release_src_id() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.src_id)
  clear_has_src_id();
  return src_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    set_has_src_id();
  } else {
    clear_has_src_id();
  }
  src_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.src_id)
}

// required string dst_id = 2;
inline bool Message_Text::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Text::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Text::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Text::clear_dst_id() {
  dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_id();
}
inline const ::std::string& Message_Text::dst_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.dst_id)
  return dst_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_dst_id(const ::std::string& value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.dst_id)
}
inline void Message_Text::set_dst_id(const char* value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.dst_id)
}
inline void Message_Text::set_dst_id(const char* value, size_t size) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.dst_id)
}
inline ::std::string* Message_Text::mutable_dst_id() {
  set_has_dst_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.dst_id)
  return dst_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Text::release_dst_id() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.dst_id)
  clear_has_dst_id();
  return dst_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_allocated_dst_id(::std::string* dst_id) {
  if (dst_id != NULL) {
    set_has_dst_id();
  } else {
    clear_has_dst_id();
  }
  dst_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.dst_id)
}

// required int32 time = 3;
inline bool Message_Text::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Text::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Text::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Text::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Message_Text::time() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.time)
  return time_;
}
inline void Message_Text::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.Text.time)
}

// required string msg = 4;
inline bool Message_Text::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Text::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Text::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Text::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Message_Text::msg() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.msg)
}
inline void Message_Text::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.msg)
}
inline void Message_Text::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.msg)
}
inline ::std::string* Message_Text::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Text::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Text::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.msg)
}

// -------------------------------------------------------------------

// Message_User_info

// required string uid = 1;
inline bool Message_User_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_User_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_User_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_User_info::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
inline const ::std::string& Message_User_info::uid() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.uid)
}
inline void Message_User_info::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.uid)
}
inline void Message_User_info::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.uid)
}
inline ::std::string* Message_User_info::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_User_info::release_uid() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.uid)
}

// required string uname = 2;
inline bool Message_User_info::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_User_info::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_User_info::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_User_info::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uname();
}
inline const ::std::string& Message_User_info::uname() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_uname(const ::std::string& value) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.uname)
}
inline void Message_User_info::set_uname(const char* value) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.uname)
}
inline void Message_User_info::set_uname(const char* value, size_t size) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.uname)
}
inline ::std::string* Message_User_info::mutable_uname() {
  set_has_uname();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_User_info::release_uname() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.uname)
  clear_has_uname();
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    set_has_uname();
  } else {
    clear_has_uname();
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.uname)
}

// optional string area = 3;
inline bool Message_User_info::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_User_info::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_User_info::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_User_info::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_area();
}
inline const ::std::string& Message_User_info::area() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.area)
  return area_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_area(const ::std::string& value) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.area)
}
inline void Message_User_info::set_area(const char* value) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.area)
}
inline void Message_User_info::set_area(const char* value, size_t size) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.area)
}
inline ::std::string* Message_User_info::mutable_area() {
  set_has_area();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_User_info::release_area() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.area)
  clear_has_area();
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_User_info::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    set_has_area();
  } else {
    clear_has_area();
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.area)
}

// required int32 friends = 4;
inline bool Message_User_info::has_friends() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_User_info::set_has_friends() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_User_info::clear_has_friends() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_User_info::clear_friends() {
  friends_ = 0;
  clear_has_friends();
}
inline ::google::protobuf::int32 Message_User_info::friends() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.friends)
  return friends_;
}
inline void Message_User_info::set_friends(::google::protobuf::int32 value) {
  set_has_friends();
  friends_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.User_info.friends)
}

// -------------------------------------------------------------------

// Message_Group_info

// required string gid = 1;
inline bool Message_Group_info::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Group_info::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Group_info::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Group_info::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
inline const ::std::string& Message_Group_info::gid() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.gid)
  return gid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.gid)
}
inline void Message_Group_info::set_gid(const char* value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.gid)
}
inline void Message_Group_info::set_gid(const char* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.gid)
}
inline ::std::string* Message_Group_info::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Group_info::release_gid() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.gid)
  clear_has_gid();
  return gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.gid)
}

// required string name = 2;
inline bool Message_Group_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Group_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Group_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Group_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Message_Group_info::name() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.name)
}
inline void Message_Group_info::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.name)
}
inline void Message_Group_info::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.name)
}
inline ::std::string* Message_Group_info::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Group_info::release_name() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.name)
}

// required string own = 3;
inline bool Message_Group_info::has_own() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Group_info::set_has_own() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Group_info::clear_has_own() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Group_info::clear_own() {
  own_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_own();
}
inline const ::std::string& Message_Group_info::own() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.own)
  return own_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_own(const ::std::string& value) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.own)
}
inline void Message_Group_info::set_own(const char* value) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.own)
}
inline void Message_Group_info::set_own(const char* value, size_t size) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.own)
}
inline ::std::string* Message_Group_info::mutable_own() {
  set_has_own();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.own)
  return own_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message_Group_info::release_own() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.own)
  clear_has_own();
  return own_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message_Group_info::set_allocated_own(::std::string* own) {
  if (own != NULL) {
    set_has_own();
  } else {
    clear_has_own();
  }
  own_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), own);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.own)
}

// required int32 nums = 4;
inline bool Message_Group_info::has_nums() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Group_info::set_has_nums() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Group_info::clear_has_nums() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Group_info::clear_nums() {
  nums_ = 0;
  clear_has_nums();
}
inline ::google::protobuf::int32 Message_Group_info::nums() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.nums)
  return nums_;
}
inline void Message_Group_info::set_nums(::google::protobuf::int32 value) {
  set_has_nums();
  nums_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.nums)
}

// -------------------------------------------------------------------

// Message

// required .chat.Message.TYPE msg_type = 1;
inline bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::chat::Message_TYPE Message::msg_type() const {
  // @@protoc_insertion_point(field_get:chat.Message.msg_type)
  return static_cast< ::chat::Message_TYPE >(msg_type_);
}
inline void Message::set_msg_type(::chat::Message_TYPE value) {
  assert(::chat::Message_TYPE_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.msg_type)
}

// optional string src_id = 2;
inline bool Message::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_id();
}
inline const ::std::string& Message::src_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.src_id)
  return src_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_src_id(const ::std::string& value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.src_id)
}
inline void Message::set_src_id(const char* value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.src_id)
}
inline void Message::set_src_id(const char* value, size_t size) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.src_id)
}
inline ::std::string* Message::mutable_src_id() {
  set_has_src_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.src_id)
  return src_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_src_id() {
  // @@protoc_insertion_point(field_release:chat.Message.src_id)
  clear_has_src_id();
  return src_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    set_has_src_id();
  } else {
    clear_has_src_id();
  }
  src_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.src_id)
}

// optional string dst_id = 3;
inline bool Message::has_dst_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_dst_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_dst_id() {
  dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_id();
}
inline const ::std::string& Message::dst_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.dst_id)
  return dst_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_dst_id(const ::std::string& value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.dst_id)
}
inline void Message::set_dst_id(const char* value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.dst_id)
}
inline void Message::set_dst_id(const char* value, size_t size) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.dst_id)
}
inline ::std::string* Message::mutable_dst_id() {
  set_has_dst_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.dst_id)
  return dst_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_dst_id() {
  // @@protoc_insertion_point(field_release:chat.Message.dst_id)
  clear_has_dst_id();
  return dst_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_dst_id(::std::string* dst_id) {
  if (dst_id != NULL) {
    set_has_dst_id();
  } else {
    clear_has_dst_id();
  }
  dst_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.dst_id)
}

// optional string password = 4;
inline bool Message::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Message::password() const {
  // @@protoc_insertion_point(field_get:chat.Message.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.password)
}
inline void Message::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.password)
}
inline void Message::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.password)
}
inline ::std::string* Message::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:chat.Message.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_password() {
  // @@protoc_insertion_point(field_release:chat.Message.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.password)
}

// optional string user_id = 5;
inline bool Message::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& Message::user_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.user_id)
}
inline void Message::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.user_id)
}
inline void Message::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_id)
}
inline ::std::string* Message::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_user_id() {
  // @@protoc_insertion_point(field_release:chat.Message.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_id)
}

// optional string user_name = 6;
inline bool Message::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& Message::user_name() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.user_name)
}
inline void Message::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.user_name)
}
inline void Message::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_name)
}
inline ::std::string* Message::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:chat.Message.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_user_name() {
  // @@protoc_insertion_point(field_release:chat.Message.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_name)
}

// optional .chat.Message.User_info user_info = 7;
inline bool Message::has_user_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_user_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_user_info() {
  if (user_info_ != NULL) user_info_->::chat::Message_User_info::Clear();
  clear_has_user_info();
}
inline const ::chat::Message_User_info& Message::user_info() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::chat::Message_User_info* Message::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::chat::Message_User_info;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.user_info)
  return user_info_;
}
inline ::chat::Message_User_info* Message::release_user_info() {
  // @@protoc_insertion_point(field_release:chat.Message.user_info)
  clear_has_user_info();
  ::chat::Message_User_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void Message::set_allocated_user_info(::chat::Message_User_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_info)
}

// optional .chat.Message.Text msg_text = 8;
inline bool Message::has_msg_text() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_msg_text() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_msg_text() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_msg_text() {
  if (msg_text_ != NULL) msg_text_->::chat::Message_Text::Clear();
  clear_has_msg_text();
}
inline const ::chat::Message_Text& Message::msg_text() const {
  // @@protoc_insertion_point(field_get:chat.Message.msg_text)
  return msg_text_ != NULL ? *msg_text_ : *default_instance_->msg_text_;
}
inline ::chat::Message_Text* Message::mutable_msg_text() {
  set_has_msg_text();
  if (msg_text_ == NULL) {
    msg_text_ = new ::chat::Message_Text;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.msg_text)
  return msg_text_;
}
inline ::chat::Message_Text* Message::release_msg_text() {
  // @@protoc_insertion_point(field_release:chat.Message.msg_text)
  clear_has_msg_text();
  ::chat::Message_Text* temp = msg_text_;
  msg_text_ = NULL;
  return temp;
}
inline void Message::set_allocated_msg_text(::chat::Message_Text* msg_text) {
  delete msg_text_;
  msg_text_ = msg_text;
  if (msg_text) {
    set_has_msg_text();
  } else {
    clear_has_msg_text();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.msg_text)
}

// repeated string user_list = 9;
inline int Message::user_list_size() const {
  return user_list_.size();
}
inline void Message::clear_user_list() {
  user_list_.Clear();
}
inline const ::std::string& Message::user_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.user_list)
  return user_list_.Get(index);
}
inline ::std::string* Message::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.user_list)
  return user_list_.Mutable(index);
}
inline void Message::set_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.user_list)
  user_list_.Mutable(index)->assign(value);
}
inline void Message::set_user_list(int index, const char* value) {
  user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.user_list)
}
inline void Message::set_user_list(int index, const char* value, size_t size) {
  user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_list)
}
inline ::std::string* Message::add_user_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.user_list)
  return user_list_.Add();
}
inline void Message::add_user_list(const ::std::string& value) {
  user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.user_list)
}
inline void Message::add_user_list(const char* value) {
  user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.user_list)
}
inline void Message::add_user_list(const char* value, size_t size) {
  user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.user_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::user_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.user_list)
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.user_list)
  return &user_list_;
}

// repeated .chat.Message.Text chat_record = 10;
inline int Message::chat_record_size() const {
  return chat_record_.size();
}
inline void Message::clear_chat_record() {
  chat_record_.Clear();
}
inline const ::chat::Message_Text& Message::chat_record(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.chat_record)
  return chat_record_.Get(index);
}
inline ::chat::Message_Text* Message::mutable_chat_record(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.chat_record)
  return chat_record_.Mutable(index);
}
inline ::chat::Message_Text* Message::add_chat_record() {
  // @@protoc_insertion_point(field_add:chat.Message.chat_record)
  return chat_record_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::Message_Text >*
Message::mutable_chat_record() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.chat_record)
  return &chat_record_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::Message_Text >&
Message::chat_record() const {
  // @@protoc_insertion_point(field_list:chat.Message.chat_record)
  return chat_record_;
}

// optional int32 page = 11;
inline bool Message::has_page() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message::set_has_page() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message::clear_has_page() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 Message::page() const {
  // @@protoc_insertion_point(field_get:chat.Message.page)
  return page_;
}
inline void Message::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.page)
}

// optional .chat.Message.STATUS status = 12;
inline bool Message::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::chat::Message_STATUS Message::status() const {
  // @@protoc_insertion_point(field_get:chat.Message.status)
  return static_cast< ::chat::Message_STATUS >(status_);
}
inline void Message::set_status(::chat::Message_STATUS value) {
  assert(::chat::Message_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.status)
}

// optional .chat.Message.Group_info group_info = 13;
inline bool Message::has_group_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Message::set_has_group_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Message::clear_has_group_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Message::clear_group_info() {
  if (group_info_ != NULL) group_info_->::chat::Message_Group_info::Clear();
  clear_has_group_info();
}
inline const ::chat::Message_Group_info& Message::group_info() const {
  // @@protoc_insertion_point(field_get:chat.Message.group_info)
  return group_info_ != NULL ? *group_info_ : *default_instance_->group_info_;
}
inline ::chat::Message_Group_info* Message::mutable_group_info() {
  set_has_group_info();
  if (group_info_ == NULL) {
    group_info_ = new ::chat::Message_Group_info;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.group_info)
  return group_info_;
}
inline ::chat::Message_Group_info* Message::release_group_info() {
  // @@protoc_insertion_point(field_release:chat.Message.group_info)
  clear_has_group_info();
  ::chat::Message_Group_info* temp = group_info_;
  group_info_ = NULL;
  return temp;
}
inline void Message::set_allocated_group_info(::chat::Message_Group_info* group_info) {
  delete group_info_;
  group_info_ = group_info;
  if (group_info) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.group_info)
}

// repeated string group_list = 14;
inline int Message::group_list_size() const {
  return group_list_.size();
}
inline void Message::clear_group_list() {
  group_list_.Clear();
}
inline const ::std::string& Message::group_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.group_list)
  return group_list_.Get(index);
}
inline ::std::string* Message::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.group_list)
  return group_list_.Mutable(index);
}
inline void Message::set_group_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.group_list)
  group_list_.Mutable(index)->assign(value);
}
inline void Message::set_group_list(int index, const char* value) {
  group_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.group_list)
}
inline void Message::set_group_list(int index, const char* value, size_t size) {
  group_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.group_list)
}
inline ::std::string* Message::add_group_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.group_list)
  return group_list_.Add();
}
inline void Message::add_group_list(const ::std::string& value) {
  group_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.group_list)
}
inline void Message::add_group_list(const char* value) {
  group_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.group_list)
}
inline void Message::add_group_list(const char* value, size_t size) {
  group_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.group_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::group_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.group_list)
  return group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.group_list)
  return &group_list_;
}

// repeated string group_user_list = 15;
inline int Message::group_user_list_size() const {
  return group_user_list_.size();
}
inline void Message::clear_group_user_list() {
  group_user_list_.Clear();
}
inline const ::std::string& Message::group_user_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.group_user_list)
  return group_user_list_.Get(index);
}
inline ::std::string* Message::mutable_group_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.group_user_list)
  return group_user_list_.Mutable(index);
}
inline void Message::set_group_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.group_user_list)
  group_user_list_.Mutable(index)->assign(value);
}
inline void Message::set_group_user_list(int index, const char* value) {
  group_user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.group_user_list)
}
inline void Message::set_group_user_list(int index, const char* value, size_t size) {
  group_user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.group_user_list)
}
inline ::std::string* Message::add_group_user_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.group_user_list)
  return group_user_list_.Add();
}
inline void Message::add_group_user_list(const ::std::string& value) {
  group_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.group_user_list)
}
inline void Message::add_group_user_list(const char* value) {
  group_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.group_user_list)
}
inline void Message::add_group_user_list(const char* value, size_t size) {
  group_user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.group_user_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::group_user_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.group_user_list)
  return group_user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_group_user_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.group_user_list)
  return &group_user_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::Message_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Message_TYPE>() {
  return ::chat::Message_TYPE_descriptor();
}
template <> struct is_proto_enum< ::chat::Message_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Message_STATUS>() {
  return ::chat::Message_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
