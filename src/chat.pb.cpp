// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf/chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_User_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_User_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_Group_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_Group_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, msg_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, chat_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, group_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, group_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, group_user_list_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Message_Text_descriptor_ = Message_descriptor_->nested_type(0);
  static const int Message_Text_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, msg_),
  };
  Message_Text_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_Text_descriptor_,
      Message_Text::default_instance_,
      Message_Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_Text),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Text, _internal_metadata_),
      -1);
  Message_User_info_descriptor_ = Message_descriptor_->nested_type(1);
  static const int Message_User_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, friends_),
  };
  Message_User_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_User_info_descriptor_,
      Message_User_info::default_instance_,
      Message_User_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_User_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_User_info, _internal_metadata_),
      -1);
  Message_Group_info_descriptor_ = Message_descriptor_->nested_type(2);
  static const int Message_Group_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, own_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, nums_),
  };
  Message_Group_info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_Group_info_descriptor_,
      Message_Group_info::default_instance_,
      Message_Group_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message_Group_info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Group_info, _internal_metadata_),
      -1);
  Message_TYPE_descriptor_ = Message_descriptor_->enum_type(0);
  Message_STATUS_descriptor_ = Message_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_Text_descriptor_, &Message_Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_User_info_descriptor_, &Message_User_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_Group_info_descriptor_, &Message_Group_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Message_Text::default_instance_;
  delete Message_Text_reflection_;
  delete Message_User_info::default_instance_;
  delete Message_User_info_reflection_;
  delete Message_Group_info::default_instance_;
  delete Message_Group_info_reflection_;
}

void protobuf_AddDesc_chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\004chat\"\377\007\n\007Message\022$\n\010msg_ty"
    "pe\030\001 \002(\0162\022.chat.Message.TYPE\022\016\n\006src_id\030\002"
    " \001(\t\022\016\n\006dst_id\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\017"
    "\n\007user_id\030\005 \001(\t\022\021\n\tuser_name\030\006 \001(\t\022*\n\tus"
    "er_info\030\007 \001(\0132\027.chat.Message.User_info\022$"
    "\n\010msg_text\030\010 \001(\0132\022.chat.Message.Text\022\021\n\t"
    "user_list\030\t \003(\t\022\'\n\013chat_record\030\n \003(\0132\022.c"
    "hat.Message.Text\022\014\n\004page\030\013 \001(\005\022$\n\006status"
    "\030\014 \001(\0162\024.chat.Message.STATUS\022,\n\ngroup_in"
    "fo\030\r \001(\0132\030.chat.Message.Group_info\022\022\n\ngr"
    "oup_list\030\016 \003(\t\022\027\n\017group_user_list\030\017 \003(\t\032"
    "A\n\004Text\022\016\n\006src_id\030\001 \002(\t\022\016\n\006dst_id\030\002 \002(\t\022"
    "\014\n\004time\030\003 \002(\005\022\013\n\003msg\030\004 \002(\t\032F\n\tUser_info\022"
    "\013\n\003uid\030\001 \002(\t\022\r\n\005uname\030\002 \002(\t\022\014\n\004area\030\003 \001("
    "\t\022\017\n\007friends\030\004 \002(\005\032B\n\nGroup_info\022\013\n\003gid\030"
    "\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\013\n\003own\030\003 \002(\t\022\014\n\004nums"
    "\030\004 \002(\005\"\303\002\n\004TYPE\022\014\n\010REGISTER\020\000\022\t\n\005LOGIN\020\001"
    "\022\017\n\013ADD_REQUEST\020\002\022\017\n\013ADD_RESPOND\020\003\022\023\n\017GE"
    "T_FRIEND_LIST\020\004\022\021\n\rGET_USER_INFO\020\005\022\016\n\nSI"
    "NGLE_MSG\020\006\022\r\n\tGROUP_MSG\020\007\022\020\n\014CREATE_GROU"
    "P\020\010\022\026\n\022INVITE_ENTER_GROUP\020\t\022\023\n\017GET_CHAT_"
    "RECORD\020\n\022\022\n\016GET_GROUP_LIST\020\013\022\022\n\016GET_GROU"
    "P_INFO\020\014\022\027\n\023GET_GROUP_USER_LIST\020\r\022\036\n\032INV"
    "ITE_ENTER_GROUP_RESPOND\020\016\022\031\n\025GET_GROUP_C"
    "HAT_RECORD\020\017\"F\n\006STATUS\022\013\n\007SUCCESS\020\000\022\t\n\005E"
    "RROR\020\001\022\022\n\016PASSWORD_ERROR\020\002\022\020\n\014UID_NOEXIS"
    "TS\020\003", 1044);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message_Text::default_instance_ = new Message_Text();
  Message_User_info::default_instance_ = new Message_User_info();
  Message_Group_info::default_instance_ = new Message_Group_info();
  Message::default_instance_->InitAsDefaultInstance();
  Message_Text::default_instance_->InitAsDefaultInstance();
  Message_User_info::default_instance_->InitAsDefaultInstance();
  Message_Group_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_TYPE_descriptor_;
}
bool Message_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_TYPE Message::REGISTER;
const Message_TYPE Message::LOGIN;
const Message_TYPE Message::ADD_REQUEST;
const Message_TYPE Message::ADD_RESPOND;
const Message_TYPE Message::GET_FRIEND_LIST;
const Message_TYPE Message::GET_USER_INFO;
const Message_TYPE Message::SINGLE_MSG;
const Message_TYPE Message::GROUP_MSG;
const Message_TYPE Message::CREATE_GROUP;
const Message_TYPE Message::INVITE_ENTER_GROUP;
const Message_TYPE Message::GET_CHAT_RECORD;
const Message_TYPE Message::GET_GROUP_LIST;
const Message_TYPE Message::GET_GROUP_INFO;
const Message_TYPE Message::GET_GROUP_USER_LIST;
const Message_TYPE Message::INVITE_ENTER_GROUP_RESPOND;
const Message_TYPE Message::GET_GROUP_CHAT_RECORD;
const Message_TYPE Message::TYPE_MIN;
const Message_TYPE Message::TYPE_MAX;
const int Message::TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Message_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_STATUS_descriptor_;
}
bool Message_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_STATUS Message::SUCCESS;
const Message_STATUS Message::ERROR;
const Message_STATUS Message::PASSWORD_ERROR;
const Message_STATUS Message::UID_NOEXISTS;
const Message_STATUS Message::STATUS_MIN;
const Message_STATUS Message::STATUS_MAX;
const int Message::STATUS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Text::kSrcIdFieldNumber;
const int Message_Text::kDstIdFieldNumber;
const int Message_Text::kTimeFieldNumber;
const int Message_Text::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Text::Message_Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Message.Text)
}

void Message_Text::InitAsDefaultInstance() {
}

Message_Text::Message_Text(const Message_Text& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Message.Text)
}

void Message_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Text::~Message_Text() {
  // @@protoc_insertion_point(destructor:chat.Message.Text)
  SharedDtor();
}

void Message_Text::SharedDtor() {
  src_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Text_descriptor_;
}

const Message_Text& Message_Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Message_Text* Message_Text::default_instance_ = NULL;

Message_Text* Message_Text::New(::google::protobuf::Arena* arena) const {
  Message_Text* n = new Message_Text;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Text::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Message.Text)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_src_id()) {
      src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dst_id()) {
      dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Message.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_id().data(), this->src_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Text.src_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst_id;
        break;
      }

      // required string dst_id = 2;
      case 2: {
        if (tag == 18) {
         parse_dst_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst_id().data(), this->dst_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Text.dst_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // required string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Text.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Message.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Message.Text)
  return false;
#undef DO_
}

void Message_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Message.Text)
  // required string src_id = 1;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.src_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_id(), output);
  }

  // required string dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_id().data(), this->dst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.dst_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dst_id(), output);
  }

  // required int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Message.Text)
}

::google::protobuf::uint8* Message_Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.Message.Text)
  // required string src_id = 1;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.src_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_id(), target);
  }

  // required string dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_id().data(), this->dst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.dst_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst_id(), target);
  }

  // required int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Text.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Message.Text)
  return target;
}

int Message_Text::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.Message.Text)
  int total_size = 0;

  if (has_src_id()) {
    // required string src_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_id());
  }

  if (has_dst_id()) {
    // required string dst_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_id());
  }

  if (has_time()) {
    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_msg()) {
    // required string msg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  return total_size;
}
int Message_Text::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Message.Text)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string src_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_id());

    // required string dst_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_id());

    // required int32 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required string msg = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Message.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_Text* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Message.Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Message.Text)
    MergeFrom(*source);
  }
}

void Message_Text::MergeFrom(const Message_Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Message.Text)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_id()) {
      set_has_src_id();
      src_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_id_);
    }
    if (from.has_dst_id()) {
      set_has_dst_id();
      dst_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_id_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Message.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Text::CopyFrom(const Message_Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Message.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Message_Text::Swap(Message_Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Text::InternalSwap(Message_Text* other) {
  src_id_.Swap(&other->src_id_);
  dst_id_.Swap(&other->dst_id_);
  std::swap(time_, other->time_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Text_descriptor_;
  metadata.reflection = Message_Text_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_User_info::kUidFieldNumber;
const int Message_User_info::kUnameFieldNumber;
const int Message_User_info::kAreaFieldNumber;
const int Message_User_info::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_User_info::Message_User_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Message.User_info)
}

void Message_User_info::InitAsDefaultInstance() {
}

Message_User_info::Message_User_info(const Message_User_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Message.User_info)
}

void Message_User_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friends_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_User_info::~Message_User_info() {
  // @@protoc_insertion_point(destructor:chat.Message.User_info)
  SharedDtor();
}

void Message_User_info::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  area_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_User_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_User_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_User_info_descriptor_;
}

const Message_User_info& Message_User_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Message_User_info* Message_User_info::default_instance_ = NULL;

Message_User_info* Message_User_info::New(::google::protobuf::Arena* arena) const {
  Message_User_info* n = new Message_User_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_User_info::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Message.User_info)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_uid()) {
      uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uname()) {
      uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_area()) {
      area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    friends_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_User_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Message.User_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.User_info.uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uname;
        break;
      }

      // required string uname = 2;
      case 2: {
        if (tag == 18) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.User_info.uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_area;
        break;
      }

      // optional string area = 3;
      case 3: {
        if (tag == 26) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->area().data(), this->area().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.User_info.area");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friends;
        break;
      }

      // required int32 friends = 4;
      case 4: {
        if (tag == 32) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friends_)));
          set_has_friends();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Message.User_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Message.User_info)
  return false;
#undef DO_
}

void Message_User_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Message.User_info)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // required string uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional string area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.area");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->area(), output);
  }

  // required int32 friends = 4;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friends(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Message.User_info)
}

::google::protobuf::uint8* Message_User_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.Message.User_info)
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // required string uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional string area = 3;
  if (has_area()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->area().data(), this->area().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.User_info.area");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->area(), target);
  }

  // required int32 friends = 4;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friends(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Message.User_info)
  return target;
}

int Message_User_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.Message.User_info)
  int total_size = 0;

  if (has_uid()) {
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  if (has_uname()) {
    // required string uname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  if (has_friends()) {
    // required int32 friends = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friends());
  }

  return total_size;
}
int Message_User_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Message.User_info)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());

    // required string uname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());

    // required int32 friends = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friends());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string area = 3;
  if (has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->area());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_User_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Message.User_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_User_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_User_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Message.User_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Message.User_info)
    MergeFrom(*source);
  }
}

void Message_User_info::MergeFrom(const Message_User_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Message.User_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_has_uid();
      uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
    }
    if (from.has_uname()) {
      set_has_uname();
      uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
    }
    if (from.has_area()) {
      set_has_area();
      area_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_);
    }
    if (from.has_friends()) {
      set_friends(from.friends());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_User_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Message.User_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_User_info::CopyFrom(const Message_User_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Message.User_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_User_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void Message_User_info::Swap(Message_User_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_User_info::InternalSwap(Message_User_info* other) {
  uid_.Swap(&other->uid_);
  uname_.Swap(&other->uname_);
  area_.Swap(&other->area_);
  std::swap(friends_, other->friends_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_User_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_User_info_descriptor_;
  metadata.reflection = Message_User_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Group_info::kGidFieldNumber;
const int Message_Group_info::kNameFieldNumber;
const int Message_Group_info::kOwnFieldNumber;
const int Message_Group_info::kNumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Group_info::Message_Group_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Message.Group_info)
}

void Message_Group_info::InitAsDefaultInstance() {
}

Message_Group_info::Message_Group_info(const Message_Group_info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Message.Group_info)
}

void Message_Group_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  own_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message_Group_info::~Message_Group_info() {
  // @@protoc_insertion_point(destructor:chat.Message.Group_info)
  SharedDtor();
}

void Message_Group_info::SharedDtor() {
  gid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  own_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message_Group_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Group_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Group_info_descriptor_;
}

const Message_Group_info& Message_Group_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Message_Group_info* Message_Group_info::default_instance_ = NULL;

Message_Group_info* Message_Group_info::New(::google::protobuf::Arena* arena) const {
  Message_Group_info* n = new Message_Group_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Group_info::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Message.Group_info)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_gid()) {
      gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_own()) {
      own_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message_Group_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Message.Group_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Group_info.gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Group_info.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_own;
        break;
      }

      // required string own = 3;
      case 3: {
        if (tag == 26) {
         parse_own:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->own().data(), this->own().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.Group_info.own");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nums;
        break;
      }

      // required int32 nums = 4;
      case 4: {
        if (tag == 32) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Message.Group_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Message.Group_info)
  return false;
#undef DO_
}

void Message_Group_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Message.Group_info)
  // required string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string own = 3;
  if (has_own()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own().data(), this->own().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.own");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->own(), output);
  }

  // required int32 nums = 4;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nums(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Message.Group_info)
}

::google::protobuf::uint8* Message_Group_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.Message.Group_info)
  // required string gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string own = 3;
  if (has_own()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own().data(), this->own().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.Group_info.own");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->own(), target);
  }

  // required int32 nums = 4;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nums(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Message.Group_info)
  return target;
}

int Message_Group_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat.Message.Group_info)
  int total_size = 0;

  if (has_gid()) {
    // required string gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gid());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_own()) {
    // required string own = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->own());
  }

  if (has_nums()) {
    // required int32 nums = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nums());
  }

  return total_size;
}
int Message_Group_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Message.Group_info)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gid());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string own = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->own());

    // required int32 nums = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nums());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Group_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Message.Group_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message_Group_info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Group_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Message.Group_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Message.Group_info)
    MergeFrom(*source);
  }
}

void Message_Group_info::MergeFrom(const Message_Group_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Message.Group_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_has_gid();
      gid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gid_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_own()) {
      set_has_own();
      own_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.own_);
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message_Group_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Message.Group_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Group_info::CopyFrom(const Message_Group_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Message.Group_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Group_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Message_Group_info::Swap(Message_Group_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Group_info::InternalSwap(Message_Group_info* other) {
  gid_.Swap(&other->gid_);
  name_.Swap(&other->name_);
  own_.Swap(&other->own_);
  std::swap(nums_, other->nums_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Group_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_Group_info_descriptor_;
  metadata.reflection = Message_Group_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kMsgTypeFieldNumber;
const int Message::kSrcIdFieldNumber;
const int Message::kDstIdFieldNumber;
const int Message::kPasswordFieldNumber;
const int Message::kUserIdFieldNumber;
const int Message::kUserNameFieldNumber;
const int Message::kUserInfoFieldNumber;
const int Message::kMsgTextFieldNumber;
const int Message::kUserListFieldNumber;
const int Message::kChatRecordFieldNumber;
const int Message::kPageFieldNumber;
const int Message::kStatusFieldNumber;
const int Message::kGroupInfoFieldNumber;
const int Message::kGroupListFieldNumber;
const int Message::kGroupUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Message)
}

void Message::InitAsDefaultInstance() {
  user_info_ = const_cast< ::chat::Message_User_info*>(&::chat::Message_User_info::default_instance());
  msg_text_ = const_cast< ::chat::Message_Text*>(&::chat::Message_Text::default_instance());
  group_info_ = const_cast< ::chat::Message_Group_info*>(&::chat::Message_Group_info::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0;
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_info_ = NULL;
  msg_text_ = NULL;
  page_ = 0;
  status_ = 0;
  group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chat.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  src_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete user_info_;
    delete msg_text_;
    delete group_info_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Message)
  if (_has_bits_[0 / 32] & 255u) {
    msg_type_ = 0;
    if (has_src_id()) {
      src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dst_id()) {
      dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::chat::Message_User_info::Clear();
    }
    if (has_msg_text()) {
      if (msg_text_ != NULL) msg_text_->::chat::Message_Text::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7168u) {
    page_ = 0;
    status_ = 0;
    if (has_group_info()) {
      if (group_info_ != NULL) group_info_->::chat::Message_Group_info::Clear();
    }
  }
  user_list_.Clear();
  chat_record_.Clear();
  group_list_.Clear();
  group_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chat.Message.TYPE msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chat::Message_TYPE_IsValid(value)) {
            set_msg_type(static_cast< ::chat::Message_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_src_id;
        break;
      }

      // optional string src_id = 2;
      case 2: {
        if (tag == 18) {
         parse_src_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src_id().data(), this->src_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.src_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dst_id;
        break;
      }

      // optional string dst_id = 3;
      case 3: {
        if (tag == 26) {
         parse_dst_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst_id().data(), this->dst_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.dst_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_id;
        break;
      }

      // optional string user_id = 5;
      case 5: {
        if (tag == 42) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (tag == 50) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_info;
        break;
      }

      // optional .chat.Message.User_info user_info = 7;
      case 7: {
        if (tag == 58) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg_text;
        break;
      }

      // optional .chat.Message.Text msg_text = 8;
      case 8: {
        if (tag == 66) {
         parse_msg_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_list;
        break;
      }

      // repeated string user_list = 9;
      case 9: {
        if (tag == 74) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_list(this->user_list_size() - 1).data(),
            this->user_list(this->user_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.user_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_list;
        if (input->ExpectTag(82)) goto parse_chat_record;
        break;
      }

      // repeated .chat.Message.Text chat_record = 10;
      case 10: {
        if (tag == 82) {
         parse_chat_record:
          DO_(input->IncrementRecursionDepth());
         parse_loop_chat_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chat_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_chat_record;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_page;
        break;
      }

      // optional int32 page = 11;
      case 11: {
        if (tag == 88) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_status;
        break;
      }

      // optional .chat.Message.STATUS status = 12;
      case 12: {
        if (tag == 96) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chat::Message_STATUS_IsValid(value)) {
            set_status(static_cast< ::chat::Message_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_group_info;
        break;
      }

      // optional .chat.Message.Group_info group_info = 13;
      case 13: {
        if (tag == 106) {
         parse_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_group_list;
        break;
      }

      // repeated string group_list = 14;
      case 14: {
        if (tag == 114) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_list(this->group_list_size() - 1).data(),
            this->group_list(this->group_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.group_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_group_list;
        if (input->ExpectTag(122)) goto parse_group_user_list;
        break;
      }

      // repeated string group_user_list = 15;
      case 15: {
        if (tag == 122) {
         parse_group_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_user_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_user_list(this->group_user_list_size() - 1).data(),
            this->group_user_list(this->group_user_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat.Message.group_user_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_group_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Message)
  // required .chat.Message.TYPE msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // optional string src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.src_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src_id(), output);
  }

  // optional string dst_id = 3;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_id().data(), this->dst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.dst_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dst_id(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_name(), output);
  }

  // optional .chat.Message.User_info user_info = 7;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->user_info_, output);
  }

  // optional .chat.Message.Text msg_text = 8;
  if (has_msg_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->msg_text_, output);
  }

  // repeated string user_list = 9;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_list(i).data(), this->user_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->user_list(i), output);
  }

  // repeated .chat.Message.Text chat_record = 10;
  for (unsigned int i = 0, n = this->chat_record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->chat_record(i), output);
  }

  // optional int32 page = 11;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->page(), output);
  }

  // optional .chat.Message.STATUS status = 12;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }

  // optional .chat.Message.Group_info group_info = 13;
  if (has_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->group_info_, output);
  }

  // repeated string group_list = 14;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_list(i).data(), this->group_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.group_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->group_list(i), output);
  }

  // repeated string group_user_list = 15;
  for (int i = 0; i < this->group_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_user_list(i).data(), this->group_user_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.group_user_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->group_user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat.Message)
  // required .chat.Message.TYPE msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // optional string src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.src_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_id(), target);
  }

  // optional string dst_id = 3;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst_id().data(), this->dst_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.dst_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dst_id(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional .chat.Message.User_info user_info = 7;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->user_info_, false, target);
  }

  // optional .chat.Message.Text msg_text = 8;
  if (has_msg_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->msg_text_, false, target);
  }

  // repeated string user_list = 9;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_list(i).data(), this->user_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.user_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->user_list(i), target);
  }

  // repeated .chat.Message.Text chat_record = 10;
  for (unsigned int i = 0, n = this->chat_record_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->chat_record(i), false, target);
  }

  // optional int32 page = 11;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->page(), target);
  }

  // optional .chat.Message.STATUS status = 12;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }

  // optional .chat.Message.Group_info group_info = 13;
  if (has_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->group_info_, false, target);
  }

  // repeated string group_list = 14;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_list(i).data(), this->group_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.group_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->group_list(i), target);
  }

  // repeated string group_user_list = 15;
  for (int i = 0; i < this->group_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_user_list(i).data(), this->group_user_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat.Message.group_user_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->group_user_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Message)
  int total_size = 0;

  // required .chat.Message.TYPE msg_type = 1;
  if (has_msg_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_id());
    }

    // optional string dst_id = 3;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_id());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional .chat.Message.User_info user_info = 7;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_info_);
    }

    // optional .chat.Message.Text msg_text = 8;
    if (has_msg_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msg_text_);
    }

  }
  if (_has_bits_[10 / 32] & 7168u) {
    // optional int32 page = 11;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional .chat.Message.STATUS status = 12;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .chat.Message.Group_info group_info = 13;
    if (has_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->group_info_);
    }

  }
  // repeated string user_list = 9;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_list(i));
  }

  // repeated .chat.Message.Text chat_record = 10;
  total_size += 1 * this->chat_record_size();
  for (int i = 0; i < this->chat_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_record(i));
  }

  // repeated string group_list = 14;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_list(i));
  }

  // repeated string group_user_list = 15;
  total_size += 1 * this->group_user_list_size();
  for (int i = 0; i < this->group_user_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_user_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_list_.MergeFrom(from.user_list_);
  chat_record_.MergeFrom(from.chat_record_);
  group_list_.MergeFrom(from.group_list_);
  group_user_list_.MergeFrom(from.group_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_src_id()) {
      set_has_src_id();
      src_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_id_);
    }
    if (from.has_dst_id()) {
      set_has_dst_id();
      dst_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_id_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_user_info()) {
      mutable_user_info()->::chat::Message_User_info::MergeFrom(from.user_info());
    }
    if (from.has_msg_text()) {
      mutable_msg_text()->::chat::Message_Text::MergeFrom(from.msg_text());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_group_info()) {
      mutable_group_info()->::chat::Message_Group_info::MergeFrom(from.group_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_info()) {
    if (!this->user_info_->IsInitialized()) return false;
  }
  if (has_msg_text()) {
    if (!this->msg_text_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->chat_record())) return false;
  if (has_group_info()) {
    if (!this->group_info_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(msg_type_, other->msg_type_);
  src_id_.Swap(&other->src_id_);
  dst_id_.Swap(&other->dst_id_);
  password_.Swap(&other->password_);
  user_id_.Swap(&other->user_id_);
  user_name_.Swap(&other->user_name_);
  std::swap(user_info_, other->user_info_);
  std::swap(msg_text_, other->msg_text_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  chat_record_.UnsafeArenaSwap(&other->chat_record_);
  std::swap(page_, other->page_);
  std::swap(status_, other->status_);
  std::swap(group_info_, other->group_info_);
  group_list_.UnsafeArenaSwap(&other->group_list_);
  group_user_list_.UnsafeArenaSwap(&other->group_user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_Text

// required string src_id = 1;
bool Message_Text::has_src_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_Text::set_has_src_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_Text::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_Text::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_id();
}
 const ::std::string& Message_Text::src_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.src_id)
  return src_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_src_id(const ::std::string& value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.src_id)
}
 void Message_Text::set_src_id(const char* value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.src_id)
}
 void Message_Text::set_src_id(const char* value, size_t size) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.src_id)
}
 ::std::string* Message_Text::mutable_src_id() {
  set_has_src_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.src_id)
  return src_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Text::release_src_id() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.src_id)
  clear_has_src_id();
  return src_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    set_has_src_id();
  } else {
    clear_has_src_id();
  }
  src_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.src_id)
}

// required string dst_id = 2;
bool Message_Text::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_Text::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_Text::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_Text::clear_dst_id() {
  dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_id();
}
 const ::std::string& Message_Text::dst_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.dst_id)
  return dst_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_dst_id(const ::std::string& value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.dst_id)
}
 void Message_Text::set_dst_id(const char* value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.dst_id)
}
 void Message_Text::set_dst_id(const char* value, size_t size) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.dst_id)
}
 ::std::string* Message_Text::mutable_dst_id() {
  set_has_dst_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.dst_id)
  return dst_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Text::release_dst_id() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.dst_id)
  clear_has_dst_id();
  return dst_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_allocated_dst_id(::std::string* dst_id) {
  if (dst_id != NULL) {
    set_has_dst_id();
  } else {
    clear_has_dst_id();
  }
  dst_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.dst_id)
}

// required int32 time = 3;
bool Message_Text::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message_Text::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Message_Text::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message_Text::clear_time() {
  time_ = 0;
  clear_has_time();
}
 ::google::protobuf::int32 Message_Text::time() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.time)
  return time_;
}
 void Message_Text::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.Text.time)
}

// required string msg = 4;
bool Message_Text::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message_Text::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
void Message_Text::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message_Text::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& Message_Text::msg() const {
  // @@protoc_insertion_point(field_get:chat.Message.Text.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Text.msg)
}
 void Message_Text::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Text.msg)
}
 void Message_Text::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Text.msg)
}
 ::std::string* Message_Text::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:chat.Message.Text.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Text::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Message.Text.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Text::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Text.msg)
}

// -------------------------------------------------------------------

// Message_User_info

// required string uid = 1;
bool Message_User_info::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_User_info::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_User_info::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_User_info::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uid();
}
 const ::std::string& Message_User_info::uid() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_uid(const ::std::string& value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.uid)
}
 void Message_User_info::set_uid(const char* value) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.uid)
}
 void Message_User_info::set_uid(const char* value, size_t size) {
  set_has_uid();
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.uid)
}
 ::std::string* Message_User_info::mutable_uid() {
  set_has_uid();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_User_info::release_uid() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.uid)
  clear_has_uid();
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    set_has_uid();
  } else {
    clear_has_uid();
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.uid)
}

// required string uname = 2;
bool Message_User_info::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_User_info::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_User_info::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_User_info::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uname();
}
 const ::std::string& Message_User_info::uname() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.uname)
  return uname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_uname(const ::std::string& value) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.uname)
}
 void Message_User_info::set_uname(const char* value) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.uname)
}
 void Message_User_info::set_uname(const char* value, size_t size) {
  set_has_uname();
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.uname)
}
 ::std::string* Message_User_info::mutable_uname() {
  set_has_uname();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_User_info::release_uname() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.uname)
  clear_has_uname();
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    set_has_uname();
  } else {
    clear_has_uname();
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.uname)
}

// optional string area = 3;
bool Message_User_info::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message_User_info::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
void Message_User_info::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message_User_info::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_area();
}
 const ::std::string& Message_User_info::area() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.area)
  return area_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_area(const ::std::string& value) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.User_info.area)
}
 void Message_User_info::set_area(const char* value) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.User_info.area)
}
 void Message_User_info::set_area(const char* value, size_t size) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.User_info.area)
}
 ::std::string* Message_User_info::mutable_area() {
  set_has_area();
  // @@protoc_insertion_point(field_mutable:chat.Message.User_info.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_User_info::release_area() {
  // @@protoc_insertion_point(field_release:chat.Message.User_info.area)
  clear_has_area();
  return area_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_User_info::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    set_has_area();
  } else {
    clear_has_area();
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.User_info.area)
}

// required int32 friends = 4;
bool Message_User_info::has_friends() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message_User_info::set_has_friends() {
  _has_bits_[0] |= 0x00000008u;
}
void Message_User_info::clear_has_friends() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message_User_info::clear_friends() {
  friends_ = 0;
  clear_has_friends();
}
 ::google::protobuf::int32 Message_User_info::friends() const {
  // @@protoc_insertion_point(field_get:chat.Message.User_info.friends)
  return friends_;
}
 void Message_User_info::set_friends(::google::protobuf::int32 value) {
  set_has_friends();
  friends_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.User_info.friends)
}

// -------------------------------------------------------------------

// Message_Group_info

// required string gid = 1;
bool Message_Group_info::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_Group_info::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_Group_info::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_Group_info::clear_gid() {
  gid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gid();
}
 const ::std::string& Message_Group_info::gid() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.gid)
  return gid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_gid(const ::std::string& value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.gid)
}
 void Message_Group_info::set_gid(const char* value) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.gid)
}
 void Message_Group_info::set_gid(const char* value, size_t size) {
  set_has_gid();
  gid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.gid)
}
 ::std::string* Message_Group_info::mutable_gid() {
  set_has_gid();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.gid)
  return gid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Group_info::release_gid() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.gid)
  clear_has_gid();
  return gid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_allocated_gid(::std::string* gid) {
  if (gid != NULL) {
    set_has_gid();
  } else {
    clear_has_gid();
  }
  gid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gid);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.gid)
}

// required string name = 2;
bool Message_Group_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_Group_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_Group_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_Group_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Message_Group_info::name() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.name)
}
 void Message_Group_info::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.name)
}
 void Message_Group_info::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.name)
}
 ::std::string* Message_Group_info::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Group_info::release_name() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.name)
}

// required string own = 3;
bool Message_Group_info::has_own() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message_Group_info::set_has_own() {
  _has_bits_[0] |= 0x00000004u;
}
void Message_Group_info::clear_has_own() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message_Group_info::clear_own() {
  own_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_own();
}
 const ::std::string& Message_Group_info::own() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.own)
  return own_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_own(const ::std::string& value) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.own)
}
 void Message_Group_info::set_own(const char* value) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.Group_info.own)
}
 void Message_Group_info::set_own(const char* value, size_t size) {
  set_has_own();
  own_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.Group_info.own)
}
 ::std::string* Message_Group_info::mutable_own() {
  set_has_own();
  // @@protoc_insertion_point(field_mutable:chat.Message.Group_info.own)
  return own_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message_Group_info::release_own() {
  // @@protoc_insertion_point(field_release:chat.Message.Group_info.own)
  clear_has_own();
  return own_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message_Group_info::set_allocated_own(::std::string* own) {
  if (own != NULL) {
    set_has_own();
  } else {
    clear_has_own();
  }
  own_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), own);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.Group_info.own)
}

// required int32 nums = 4;
bool Message_Group_info::has_nums() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message_Group_info::set_has_nums() {
  _has_bits_[0] |= 0x00000008u;
}
void Message_Group_info::clear_has_nums() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message_Group_info::clear_nums() {
  nums_ = 0;
  clear_has_nums();
}
 ::google::protobuf::int32 Message_Group_info::nums() const {
  // @@protoc_insertion_point(field_get:chat.Message.Group_info.nums)
  return nums_;
}
 void Message_Group_info::set_nums(::google::protobuf::int32 value) {
  set_has_nums();
  nums_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.Group_info.nums)
}

// -------------------------------------------------------------------

// Message

// required .chat.Message.TYPE msg_type = 1;
bool Message::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
 ::chat::Message_TYPE Message::msg_type() const {
  // @@protoc_insertion_point(field_get:chat.Message.msg_type)
  return static_cast< ::chat::Message_TYPE >(msg_type_);
}
 void Message::set_msg_type(::chat::Message_TYPE value) {
  assert(::chat::Message_TYPE_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.msg_type)
}

// optional string src_id = 2;
bool Message::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_src_id() {
  src_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_id();
}
 const ::std::string& Message::src_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.src_id)
  return src_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_src_id(const ::std::string& value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.src_id)
}
 void Message::set_src_id(const char* value) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.src_id)
}
 void Message::set_src_id(const char* value, size_t size) {
  set_has_src_id();
  src_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.src_id)
}
 ::std::string* Message::mutable_src_id() {
  set_has_src_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.src_id)
  return src_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_src_id() {
  // @@protoc_insertion_point(field_release:chat.Message.src_id)
  clear_has_src_id();
  return src_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    set_has_src_id();
  } else {
    clear_has_src_id();
  }
  src_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.src_id)
}

// optional string dst_id = 3;
bool Message::has_dst_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_dst_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_dst_id() {
  dst_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dst_id();
}
 const ::std::string& Message::dst_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.dst_id)
  return dst_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_dst_id(const ::std::string& value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.dst_id)
}
 void Message::set_dst_id(const char* value) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.dst_id)
}
 void Message::set_dst_id(const char* value, size_t size) {
  set_has_dst_id();
  dst_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.dst_id)
}
 ::std::string* Message::mutable_dst_id() {
  set_has_dst_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.dst_id)
  return dst_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_dst_id() {
  // @@protoc_insertion_point(field_release:chat.Message.dst_id)
  clear_has_dst_id();
  return dst_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_dst_id(::std::string* dst_id) {
  if (dst_id != NULL) {
    set_has_dst_id();
  } else {
    clear_has_dst_id();
  }
  dst_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.dst_id)
}

// optional string password = 4;
bool Message::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& Message::password() const {
  // @@protoc_insertion_point(field_get:chat.Message.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.password)
}
 void Message::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.password)
}
 void Message::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.password)
}
 ::std::string* Message::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:chat.Message.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_password() {
  // @@protoc_insertion_point(field_release:chat.Message.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.password)
}

// optional string user_id = 5;
bool Message::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& Message::user_id() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.user_id)
}
 void Message::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.user_id)
}
 void Message::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_id)
}
 ::std::string* Message::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:chat.Message.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_user_id() {
  // @@protoc_insertion_point(field_release:chat.Message.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_id)
}

// optional string user_name = 6;
bool Message::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
 const ::std::string& Message::user_name() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Message.user_name)
}
 void Message::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Message.user_name)
}
 void Message::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_name)
}
 ::std::string* Message::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:chat.Message.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_user_name() {
  // @@protoc_insertion_point(field_release:chat.Message.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_name)
}

// optional .chat.Message.User_info user_info = 7;
bool Message::has_user_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Message::set_has_user_info() {
  _has_bits_[0] |= 0x00000040u;
}
void Message::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void Message::clear_user_info() {
  if (user_info_ != NULL) user_info_->::chat::Message_User_info::Clear();
  clear_has_user_info();
}
const ::chat::Message_User_info& Message::user_info() const {
  // @@protoc_insertion_point(field_get:chat.Message.user_info)
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
::chat::Message_User_info* Message::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    user_info_ = new ::chat::Message_User_info;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.user_info)
  return user_info_;
}
::chat::Message_User_info* Message::release_user_info() {
  // @@protoc_insertion_point(field_release:chat.Message.user_info)
  clear_has_user_info();
  ::chat::Message_User_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void Message::set_allocated_user_info(::chat::Message_User_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.user_info)
}

// optional .chat.Message.Text msg_text = 8;
bool Message::has_msg_text() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_msg_text() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_msg_text() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_msg_text() {
  if (msg_text_ != NULL) msg_text_->::chat::Message_Text::Clear();
  clear_has_msg_text();
}
const ::chat::Message_Text& Message::msg_text() const {
  // @@protoc_insertion_point(field_get:chat.Message.msg_text)
  return msg_text_ != NULL ? *msg_text_ : *default_instance_->msg_text_;
}
::chat::Message_Text* Message::mutable_msg_text() {
  set_has_msg_text();
  if (msg_text_ == NULL) {
    msg_text_ = new ::chat::Message_Text;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.msg_text)
  return msg_text_;
}
::chat::Message_Text* Message::release_msg_text() {
  // @@protoc_insertion_point(field_release:chat.Message.msg_text)
  clear_has_msg_text();
  ::chat::Message_Text* temp = msg_text_;
  msg_text_ = NULL;
  return temp;
}
void Message::set_allocated_msg_text(::chat::Message_Text* msg_text) {
  delete msg_text_;
  msg_text_ = msg_text;
  if (msg_text) {
    set_has_msg_text();
  } else {
    clear_has_msg_text();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.msg_text)
}

// repeated string user_list = 9;
int Message::user_list_size() const {
  return user_list_.size();
}
void Message::clear_user_list() {
  user_list_.Clear();
}
 const ::std::string& Message::user_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.user_list)
  return user_list_.Get(index);
}
 ::std::string* Message::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.user_list)
  return user_list_.Mutable(index);
}
 void Message::set_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.user_list)
  user_list_.Mutable(index)->assign(value);
}
 void Message::set_user_list(int index, const char* value) {
  user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.user_list)
}
 void Message::set_user_list(int index, const char* value, size_t size) {
  user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.user_list)
}
 ::std::string* Message::add_user_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.user_list)
  return user_list_.Add();
}
 void Message::add_user_list(const ::std::string& value) {
  user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.user_list)
}
 void Message::add_user_list(const char* value) {
  user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.user_list)
}
 void Message::add_user_list(const char* value, size_t size) {
  user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.user_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::user_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.user_list)
  return user_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.user_list)
  return &user_list_;
}

// repeated .chat.Message.Text chat_record = 10;
int Message::chat_record_size() const {
  return chat_record_.size();
}
void Message::clear_chat_record() {
  chat_record_.Clear();
}
const ::chat::Message_Text& Message::chat_record(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.chat_record)
  return chat_record_.Get(index);
}
::chat::Message_Text* Message::mutable_chat_record(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.chat_record)
  return chat_record_.Mutable(index);
}
::chat::Message_Text* Message::add_chat_record() {
  // @@protoc_insertion_point(field_add:chat.Message.chat_record)
  return chat_record_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::Message_Text >*
Message::mutable_chat_record() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.chat_record)
  return &chat_record_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::Message_Text >&
Message::chat_record() const {
  // @@protoc_insertion_point(field_list:chat.Message.chat_record)
  return chat_record_;
}

// optional int32 page = 11;
bool Message::has_page() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Message::set_has_page() {
  _has_bits_[0] |= 0x00000400u;
}
void Message::clear_has_page() {
  _has_bits_[0] &= ~0x00000400u;
}
void Message::clear_page() {
  page_ = 0;
  clear_has_page();
}
 ::google::protobuf::int32 Message::page() const {
  // @@protoc_insertion_point(field_get:chat.Message.page)
  return page_;
}
 void Message::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.page)
}

// optional .chat.Message.STATUS status = 12;
bool Message::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Message::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
void Message::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void Message::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::chat::Message_STATUS Message::status() const {
  // @@protoc_insertion_point(field_get:chat.Message.status)
  return static_cast< ::chat::Message_STATUS >(status_);
}
 void Message::set_status(::chat::Message_STATUS value) {
  assert(::chat::Message_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:chat.Message.status)
}

// optional .chat.Message.Group_info group_info = 13;
bool Message::has_group_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Message::set_has_group_info() {
  _has_bits_[0] |= 0x00001000u;
}
void Message::clear_has_group_info() {
  _has_bits_[0] &= ~0x00001000u;
}
void Message::clear_group_info() {
  if (group_info_ != NULL) group_info_->::chat::Message_Group_info::Clear();
  clear_has_group_info();
}
const ::chat::Message_Group_info& Message::group_info() const {
  // @@protoc_insertion_point(field_get:chat.Message.group_info)
  return group_info_ != NULL ? *group_info_ : *default_instance_->group_info_;
}
::chat::Message_Group_info* Message::mutable_group_info() {
  set_has_group_info();
  if (group_info_ == NULL) {
    group_info_ = new ::chat::Message_Group_info;
  }
  // @@protoc_insertion_point(field_mutable:chat.Message.group_info)
  return group_info_;
}
::chat::Message_Group_info* Message::release_group_info() {
  // @@protoc_insertion_point(field_release:chat.Message.group_info)
  clear_has_group_info();
  ::chat::Message_Group_info* temp = group_info_;
  group_info_ = NULL;
  return temp;
}
void Message::set_allocated_group_info(::chat::Message_Group_info* group_info) {
  delete group_info_;
  group_info_ = group_info;
  if (group_info) {
    set_has_group_info();
  } else {
    clear_has_group_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Message.group_info)
}

// repeated string group_list = 14;
int Message::group_list_size() const {
  return group_list_.size();
}
void Message::clear_group_list() {
  group_list_.Clear();
}
 const ::std::string& Message::group_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.group_list)
  return group_list_.Get(index);
}
 ::std::string* Message::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.group_list)
  return group_list_.Mutable(index);
}
 void Message::set_group_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.group_list)
  group_list_.Mutable(index)->assign(value);
}
 void Message::set_group_list(int index, const char* value) {
  group_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.group_list)
}
 void Message::set_group_list(int index, const char* value, size_t size) {
  group_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.group_list)
}
 ::std::string* Message::add_group_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.group_list)
  return group_list_.Add();
}
 void Message::add_group_list(const ::std::string& value) {
  group_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.group_list)
}
 void Message::add_group_list(const char* value) {
  group_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.group_list)
}
 void Message::add_group_list(const char* value, size_t size) {
  group_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.group_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::group_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.group_list)
  return group_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.group_list)
  return &group_list_;
}

// repeated string group_user_list = 15;
int Message::group_user_list_size() const {
  return group_user_list_.size();
}
void Message::clear_group_user_list() {
  group_user_list_.Clear();
}
 const ::std::string& Message::group_user_list(int index) const {
  // @@protoc_insertion_point(field_get:chat.Message.group_user_list)
  return group_user_list_.Get(index);
}
 ::std::string* Message::mutable_group_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Message.group_user_list)
  return group_user_list_.Mutable(index);
}
 void Message::set_group_user_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Message.group_user_list)
  group_user_list_.Mutable(index)->assign(value);
}
 void Message::set_group_user_list(int index, const char* value) {
  group_user_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Message.group_user_list)
}
 void Message::set_group_user_list(int index, const char* value, size_t size) {
  group_user_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Message.group_user_list)
}
 ::std::string* Message::add_group_user_list() {
  // @@protoc_insertion_point(field_add_mutable:chat.Message.group_user_list)
  return group_user_list_.Add();
}
 void Message::add_group_user_list(const ::std::string& value) {
  group_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Message.group_user_list)
}
 void Message::add_group_user_list(const char* value) {
  group_user_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Message.group_user_list)
}
 void Message::add_group_user_list(const char* value, size_t size) {
  group_user_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Message.group_user_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::group_user_list() const {
  // @@protoc_insertion_point(field_list:chat.Message.group_user_list)
  return group_user_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_group_user_list() {
  // @@protoc_insertion_point(field_mutable_list:chat.Message.group_user_list)
  return &group_user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
